{
  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.4.1318.3566",
      "templateHash": "12212278025153309726"
    }
  },
  "parameters": {
    "location": {
      "type": "string",
      "defaultValue": "[resourceGroup().location]"
    },
    "sourceVHDURL": {
      "type": "string"
    }
  },
  "resources": [
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "deploymentscript",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "sourceVHDURL": {
            "value": "[parameters('sourceVHDURL')]"
          },
          "targetStorageaccountRG": {
            "value": "[resourceGroup().name]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "6351353996706666216"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "sourceVHDURL": {
              "type": "string"
            },
            "targetStorageaccountRG": {
              "type": "string",
              "defaultValue": "[resourceGroup().name]"
            },
            "roleNameGuid": {
              "type": "string",
              "defaultValue": "[guid(resourceGroup().id, deployment().name)]"
            }
          },
          "variables": {
            "Contributor": "[format('/subscriptions/{0}/providers/Microsoft.Authorization/roleDefinitions/b24988ac-6180-42a0-ab88-20f7382dd24c', subscription().subscriptionId)]"
          },
          "resources": [
            {
              "type": "Microsoft.Storage/storageAccounts",
              "apiVersion": "2021-08-01",
              "name": "[format('custom{0}', uniqueString(resourceGroup().id))]",
              "location": "[parameters('location')]",
              "properties": {
                "accessTier": "Cool",
                "minimumTlsVersion": "TLS1_2",
                "supportsHttpsTrafficOnly": true,
                "allowBlobPublicAccess": false,
                "allowSharedKeyAccess": true
              },
              "sku": {
                "name": "Standard_LRS"
              },
              "kind": "StorageV2"
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}', format('custom{0}', uniqueString(resourceGroup().id)), 'default')]",
              "properties": {
                "cors": {
                  "corsRules": []
                },
                "deleteRetentionPolicy": {
                  "enabled": false
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('custom{0}', uniqueString(resourceGroup().id)))]"
              ]
            },
            {
              "type": "Microsoft.Storage/storageAccounts/blobServices/containers",
              "apiVersion": "2021-08-01",
              "name": "[format('{0}/{1}/{2}', format('custom{0}', uniqueString(resourceGroup().id)), 'default', 'vhds')]",
              "properties": {
                "defaultEncryptionScope": "$account-encryption-key",
                "denyEncryptionScopeOverride": false,
                "publicAccess": "None"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', format('custom{0}', uniqueString(resourceGroup().id)))]",
                "[resourceId('Microsoft.Storage/storageAccounts/blobServices', format('custom{0}', uniqueString(resourceGroup().id)), 'default')]"
              ]
            },
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2018-11-30",
              "name": "[format('managedIdentity{0}', uniqueString(resourceGroup().id))]",
              "location": "[parameters('location')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2020-08-01-preview",
              "scope": "[format('Microsoft.Storage/storageAccounts/{0}', format('custom{0}', uniqueString(resourceGroup().id)))]",
              "name": "[parameters('roleNameGuid')]",
              "properties": {
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('managedIdentity{0}', uniqueString(resourceGroup().id)))).principalId]",
                "roleDefinitionId": "[variables('Contributor')]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('managedIdentity{0}', uniqueString(resourceGroup().id)))]",
                "[resourceId('Microsoft.Storage/storageAccounts', format('custom{0}', uniqueString(resourceGroup().id)))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2020-10-01",
              "name": "copyvhd",
              "location": "[parameters('location')]",
              "kind": "AzurePowerShell",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('managedIdentity{0}', uniqueString(resourceGroup().id))))]": {}
                }
              },
              "properties": {
                "arguments": "[format('-sourceVHDURL ''{0}'' -targetStorageRG {1} -targetStoragename {2}', parameters('sourceVHDURL'), parameters('targetStorageaccountRG'), format('custom{0}', uniqueString(resourceGroup().id)))]",
                "azPowerShellVersion": "6.4",
                "cleanupPreference": "OnSuccess",
                "retentionInterval": "PT4H",
                "scriptContent": "      param(\r\n        [string] $sourceVHDURL,\r\n        [string] $targetStorageRG,\r\n        [string] $targetStoragename\r\n      )\r\n      Connect-AzAccount -Identity\r\n\r\n      $TargetStorage = Get-AzStorageAccount -ResourceGroupName $targetStorageRG -Name $targetStoragename\r\n      $blobcopyresult = Start-AzStorageBlobCopy -AbsoluteUri \"$sourceVHDURL\" -DestinationContainer \"vhds\" -DestinationBlob \"testvm.vhd\" -DestinationContext $TargetStorage.Context\r\n\r\n      do {\r\n          $result = $blobcopyresult | Get-AzStorageBlobCopyState\r\n          Write-Output \"VHD copy status - \"$result.Status\r\n          if ($result.Status -eq \"Pending\") {Start-Sleep -Seconds 20 }\r\n      }\r\n      until ($result.Status -eq \"Success\")\r\n\r\n    "
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', format('managedIdentity{0}', uniqueString(resourceGroup().id)))]",
                "[resourceId('Microsoft.Storage/storageAccounts', format('custom{0}', uniqueString(resourceGroup().id)))]"
              ]
            }
          ],
          "outputs": {
            "storagename": {
              "type": "string",
              "value": "[format('custom{0}', uniqueString(resourceGroup().id))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2020-10-01",
      "name": "VMdeployment",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[parameters('location')]"
          },
          "storageAccountName": {
            "value": "[reference(resourceId('Microsoft.Resources/deployments', 'deploymentscript')).outputs.storagename.value]"
          },
          "storageAccountRG": {
            "value": "[resourceGroup().name]"
          },
          "vhdname": {
            "value": "testvm.vhd"
          },
          "resourceNamePrefix": {
            "value": "SOC-"
          },
          "resourceNameSuffix": {
            "value": "-Play"
          },
          "vmSize": {
            "value": "Standard_D2_v3"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.4.1318.3566",
              "templateHash": "9554543232876907387"
            }
          },
          "parameters": {
            "location": {
              "type": "string",
              "defaultValue": "[resourceGroup().location]"
            },
            "storageAccountRG": {
              "type": "string"
            },
            "storageAccountName": {
              "type": "string"
            },
            "vhdname": {
              "type": "string"
            },
            "resourceNamePrefix": {
              "type": "string"
            },
            "resourceNameSuffix": {
              "type": "string"
            },
            "vmSize": {
              "type": "string",
              "defaultValue": "Standard_D2_v3"
            }
          },
          "variables": {
            "vmNICname": "[format('{0}vm{1}{2}-nic01', parameters('resourceNamePrefix'), uniqueString(resourceGroup().id), parameters('resourceNameSuffix'))]",
            "vmname": "[format('{0}vm{1}{2}', parameters('resourceNamePrefix'), uniqueString(resourceGroup().id), parameters('resourceNameSuffix'))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/virtualNetworks",
              "apiVersion": "2021-05-01",
              "name": "[format('{0}vnet{1}{2}', parameters('resourceNamePrefix'), uniqueString(resourceGroup().id), parameters('resourceNameSuffix'))]",
              "location": "[parameters('location')]",
              "properties": {
                "addressSpace": {
                  "addressPrefixes": [
                    "10.10.10.0/24"
                  ]
                },
                "enableDdosProtection": false,
                "subnets": [
                  {
                    "name": "default",
                    "properties": {
                      "addressPrefix": "10.10.10.0/24"
                    }
                  }
                ]
              }
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2021-02-01",
              "name": "[variables('vmNICname')]",
              "location": "[parameters('location')]",
              "properties": {
                "ipConfigurations": [
                  {
                    "name": "ipconfig1",
                    "properties": {
                      "privateIPAllocationMethod": "Dynamic",
                      "subnet": {
                        "id": "[reference(resourceId('Microsoft.Network/virtualNetworks', format('{0}vnet{1}{2}', parameters('resourceNamePrefix'), uniqueString(resourceGroup().id), parameters('resourceNameSuffix')))).subnets[0].id]"
                      }
                    }
                  }
                ]
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/virtualNetworks', format('{0}vnet{1}{2}', parameters('resourceNamePrefix'), uniqueString(resourceGroup().id), parameters('resourceNameSuffix')))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2021-03-01",
              "name": "[variables('vmname')]",
              "location": "[parameters('location')]",
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                  "osDisk": {
                    "createOption": "Attach",
                    "name": "[format('{0}-osdisk', variables('vmname'))]",
                    "osType": "Linux",
                    "vhd": {
                      "uri": "[format('{0}vhds/{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('storageAccountRG')), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-08-01').primaryEndpoints.blob, parameters('vhdname'))]"
                    },
                    "diskSizeGB": 512
                  }
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('vmNICname'))]"
                    }
                  ]
                },
                "diagnosticsProfile": {
                  "bootDiagnostics": {
                    "enabled": true,
                    "storageUri": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('storageAccountRG')), 'Microsoft.Storage/storageAccounts', parameters('storageAccountName')), '2021-08-01').primaryEndpoints.blob]"
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('vmNICname'))]"
              ]
            }
          ]
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Resources/deployments', 'deploymentscript')]"
      ]
    }
  ]
}
